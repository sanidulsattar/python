#Time Complexity: O(n), where n is the length of the input string s.
#Space Complexity: O(min(n, m)), where m is the size of the character set.

class Solution:
    def lengthOfLongestSubstring(self, s: str) -> int:
        cSet = set()
        l=0
      #  res =0;
        ans =0;
        for r in range(len(s)):
            while(s[r] in cSet):
                cSet.remove(s[l])
                l +=1
            cSet.add(s[r])
            ans = max(ans,r-l+1)
        return ans
